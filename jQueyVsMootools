<body> 
	<div id="main"> 
		<div id="menu"> 
		<ul> 
			<li>element 1</li> 
			<li>element 2</li> 
			<li>element 3</li> 
			<li>element 4</li> 
		<ul> 
		</div> 
			<div id="status">
			</div> 
			<div id="content"> 
				<p> Paragraphe 1 </p> 
				<p> Paragraphe 2 
					<a href="#" title="Test 1" class="ajax">Cliquez</a> 
					<a href="#" title="Test 2" class="ajax">Cliquez</a> 
				</p> 
		</div>
	</div> 
</body>

Avantages jQuery :
- Plus rapide

Selecteurs :
## Récupérer la div content
-jQuery :
	var content = $(‘#content’);
-MooTools :
	var content = $(‘content’);

## Récupérer les éléments “li” du div “menu”
-jQuery :
	var lis = $(‘#menu ul li’);
-MooTools :
	var lis = $$(‘#menu ul li’);
Dans le premier cas jQuery/MooTools renvoient un seul élément, dans le second une collection.
MooTools sépare bien les deux méthodes, et structure donc mieux ses méthodes.

##Modifier une propriété : le style
On ajoute 3 styles :
* Bordure rouge
* Couleur de fond grise
* Font gras
-jQuery :
	 $(“#status”).css(‘border’,‘1px solid red’); 
	 $(“#status”).css(‘background-color’,‘#EFEFEF’); 
	 $(“#status”).css(‘font-weight’,‘bold’);
-MooTools :
	 $(‘status’).setStyles({ 
	 	‘border’: ‘1px solid red’, 
	 	‘background-color’: ‘#EFEFEF’, 
	 	‘font-weight’: ‘bold’ 
	 })
jQuery ne respecte pas les "normes" getter et setter.
MooTools est plus élégant et plus facile à lire dans ce ca là.

##Ajouter un lien dans la seconde "li" du menu
-jQuery :
	var elem = $(’<a href="www.google.fr">Google</a>’); 
	$(‘#menu li’)[1].append(elem);
-MooTools :
	var elem = new Element(‘a’).set({‘href’ = ‘www.google.fr'}).setText('Lien');
	elem.inject($$(‘#menu li’)[1]);
jQuery est pour le coup plus rapide à comprendre et à écrire. Avec MooTools on doit créer un élément puis lui assigner une propriété.

##L'evenement "DomReady"
-jQuery
	$(document).ready(
		function (){ 
			alert('Hello world !');
		}
	);
-MooTools
	window.addEvent(
		‘domready’,
		function(){
			alert('Hello world !');
		}
	)
L'écriture façon MooTools est un peu plus long mais mieux structuré. On parle bien de DOM qui est prêt contrairement à jQuery. jQuery execute la méthode même si les feuilles de styles ne sont pas encore chargées.